#!/usr/bin/env python3

import argparse
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

def read_coordinate_file(file_path):
    """
    Read the coordinate file produced by binary_to_3d.py
    
    Args:
        file_path (str): Path to the coordinate file
        
    Returns:
        tuple: Lists of x, y, z coordinates and bit values
    """
    x_coords, y_coords, z_coords = [], [], []
    bit_values = []
    
    with open(file_path, 'r') as f:
        for line in f:
            # Parse the line
            try:
                coords_str, bit_str = line.strip().split('\t')
                # Extract coordinates from format like "(x, y, z)"
                coords = coords_str.strip('()').split(',')
                x = int(coords[0].strip())
                y = int(coords[1].strip())
                z = int(coords[2].strip())
                bit = int(bit_str.strip())
                
                # Store the coordinates and bit value
                x_coords.append(x)
                y_coords.append(y)
                z_coords.append(z)
                bit_values.append(bit)
            except Exception as e:
                print(f"Error parsing line: {line.strip()} - {e}")
                continue
    
    return x_coords, y_coords, z_coords, bit_values

def visualize_3d_bits(file_path, show_zeros=True, color_map='viridis'):
    """
    Visualize the 3D bit data using matplotlib
    
    Args:
        file_path (str): Path to the coordinate file
        show_zeros (bool): Whether to display 0 bits
        color_map (str): Matplotlib colormap to use
    """
    # Read the coordinate data
    x_coords, y_coords, z_coords, bit_values = read_coordinate_file(file_path)
    
    # Create figure and 3D axis
    fig = plt.figure(figsize=(10, 8))
    ax = fig.add_subplot(111, projection='3d')
    
    # Split points by bit value (0 or 1)
    x_zeros = [x for x, bit in zip(x_coords, bit_values) if bit == 0]
    y_zeros = [y for y, bit in zip(y_coords, bit_values) if bit == 0]
    z_zeros = [z for z, bit in zip(z_coords, bit_values) if bit == 0]
    
    x_ones = [x for x, bit in zip(x_coords, bit_values) if bit == 1]
    y_ones = [y for y, bit in zip(y_coords, bit_values) if bit == 1]
    z_ones = [z for z, bit in zip(z_coords, bit_values) if bit == 1]
    
    # Plot the bits separately with different colors
    if show_zeros and x_zeros:
        scatter_zeros = ax.scatter(x_zeros, y_zeros, z_zeros, c='blue', marker='o', s=50, label='0-bits', alpha=0.7)
    
    if x_ones:
        scatter_ones = ax.scatter(x_ones, y_ones, z_ones, c='red', marker='o', s=50, label='1-bits', alpha=0.7)
    else:
        print("Warning: No 1-bits found in the data.")
    
    # Set labels and title
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Z')
    ax.set_title('3D Visualization of Binary Data')
    
    # Determine axis limits
    max_x = max(x_coords) if x_coords else 0
    max_y = max(y_coords) if y_coords else 0
    max_z = max(z_coords) if z_coords else 0
    
    # Fix Z-axis range and set integer ticks
    ax.set_xlim(0, max_x + 1)
    ax.set_ylim(0, max_y + 1)
    ax.set_zlim(0, 8)  # Fixed range from 0 to 8
    
    # Set integer ticks for all axes
    ax.xaxis.set_major_locator(plt.MaxNLocator(integer=True))
    ax.yaxis.set_major_locator(plt.MaxNLocator(integer=True))
    ax.zaxis.set_major_locator(plt.MaxNLocator(integer=True))
    
    # Set specific ticks for Z-axis from 0 to 8
    ax.set_zticks(range(9))  # 0 to 8 inclusive
    
    # Set equal aspect ratio for all axes
    # This ensures the 3D space is represented with correct proportions
    max_range = max(max_x, max_y, 8) + 1
    ax.set_box_aspect([max_range/max(1, max_x+1), 
                       max_range/max(1, max_y+1), 
                       max_range/8])
    
    # Add a legend
    ax.legend()
    
    # Display the count of points
    total_bits = len(bit_values)
    ones_count = sum(bit_values)
    zeros_count = total_bits - ones_count
    
    plt.figtext(0.02, 0.02, f"Total bits: {total_bits} | 1's: {ones_count} | 0's: {zeros_count}")
    
    # Show the plot
    plt.tight_layout()
    plt.show()

def parse_args():
    parser = argparse.ArgumentParser(description='Visualize 3D bit data')
    parser.add_argument('input_file', help='Path to the coordinate file generated by binary_to_3d.py')
    parser.add_argument('--hide-zeros', action='store_true', help='Hide 0-bits in the visualization')
    parser.add_argument('--color-map', default='viridis', help='Matplotlib colormap to use for visualization')
    return parser.parse_args()

if __name__ == '__main__':
    try:
        import matplotlib
        args = parse_args()
        visualize_3d_bits(args.input_file, not args.hide_zeros, args.color_map)
    except ImportError:
        print("This script requires matplotlib. Please install it using:")
        print("pip install matplotlib numpy")
        print("\nThen run this script again.") 